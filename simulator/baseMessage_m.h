//
// Generated file, do not edit! Created by opp_msgtool 6.1 from baseMessage.msg.
//

#ifndef __BASEMESSAGE_M_H
#define __BASEMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class BaseMessage;
// cplusplus {{
    #include <vector>
    #include "messages.h"

	inline std::ostream & operator << (std::ostream & os, const std::string & s) {
        std::operator<<(os, s);        
        return os;
	}
	typedef std::vector<std::string> stringVector;
// }}

/**
 * Class generated from <tt>baseMessage.msg:16</tt> by opp_msgtool.
 * <pre>
 * packet BaseMessage
 * {
 *     string destination;
 *     int messageType;
 *     int hopCount;
 *     stringVector hops;
 *     //bool upstreamDirection;
 *     string displayString = "b=0,0,rect,o=white,white,0	";
 * }
 * </pre>
 */
class BaseMessage : public ::omnetpp::cPacket
{
  protected:
    omnetpp::opp_string destination;
    int messageType = 0;
    int hopCount = 0;
    stringVector hops;
    omnetpp::opp_string displayString = "b=0,0,rect,o=white,white,0	";

  private:
    void copy(const BaseMessage& other);

  protected:
    bool operator==(const BaseMessage&) = delete;

  public:
    BaseMessage(const char *name=nullptr, short kind=0);
    BaseMessage(const BaseMessage& other);
    virtual ~BaseMessage();
    BaseMessage& operator=(const BaseMessage& other);
    virtual BaseMessage *dup() const override {return new BaseMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getDestination() const;
    virtual void setDestination(const char * destination);

    virtual int getMessageType() const;
    virtual void setMessageType(int messageType);

    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);

    virtual const stringVector& getHops() const;
    virtual stringVector& getHopsForUpdate() { return const_cast<stringVector&>(const_cast<BaseMessage*>(this)->getHops());}
    virtual void setHops(const stringVector& hops);

    virtual const char * getDisplayString() const;
    virtual void setDisplayString(const char * displayString);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const BaseMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, BaseMessage& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

inline any_ptr toAnyPtr(const stringVector *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline stringVector *fromAnyPtr(any_ptr ptr) { return ptr.get<stringVector>(); }
template<> inline BaseMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<BaseMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __BASEMESSAGE_M_H


//
// Generated file, do not edit! Created by opp_msgtool 6.0 from commitmentSigned.msg.
//

#ifndef __COMMITMENTSIGNED_M_H
#define __COMMITMENTSIGNED_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class commitmentSigned;
// cplusplus {{
    #include <vector>
    #include "HTLC.h"
    
    typedef std::vector<HTLC *> HTLCVector;
// }}

/**
 * Class generated from <tt>commitmentSigned.msg:27</tt> by opp_msgtool.
 * <pre>
 * packet commitmentSigned
 * {
 *     HTLCVector HTLCs;
 *     int id;
 * }
 * </pre>
 */
class commitmentSigned : public ::omnetpp::cPacket
{
  protected:
    HTLCVector HTLCs;
    int id = 0;

  private:
    void copy(const commitmentSigned& other);

  protected:
    bool operator==(const commitmentSigned&) = delete;

  public:
    commitmentSigned(const char *name=nullptr, short kind=0);
    commitmentSigned(const commitmentSigned& other);
    virtual ~commitmentSigned();
    commitmentSigned& operator=(const commitmentSigned& other);
    virtual commitmentSigned *dup() const override {return new commitmentSigned(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const HTLCVector& getHTLCs() const;
    virtual HTLCVector& getHTLCsForUpdate() { return const_cast<HTLCVector&>(const_cast<commitmentSigned*>(this)->getHTLCs());}
    virtual void setHTLCs(const HTLCVector& HTLCs);

    virtual int getId() const;
    virtual void setId(int id);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const commitmentSigned& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, commitmentSigned& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

inline any_ptr toAnyPtr(const HTLCVector *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline HTLCVector *fromAnyPtr(any_ptr ptr) { return ptr.get<HTLCVector>(); }
template<> inline commitmentSigned *fromAnyPtr(any_ptr ptr) { return check_and_cast<commitmentSigned*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __COMMITMENTSIGNED_M_H

